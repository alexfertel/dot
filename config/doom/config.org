* Doom Literate Config!
** Basic Stuff

#+BEGIN_SRC elisp
(setq user-full-name "Folke Lemaitre"
      user-mail-address "folke.lemaitre@gmail.com"
      command-line-default-directory "~/"         ; set default directory to home
      default-directory "~/"
      ns-use-proxy-icon nil                       ; empty title
      frame-title-format '"\n"                    ; use a new-line to make sure rezising info is on the next line
      undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      display-line-numbers-type 'relative
      which-key-idle-delay 0.3                    ; Show key binding help quicker
      which-key-idle-secondary-delay 0
      shell-file-name "/usr/local/bin/bash"       ; Use Bash as default shell for running term which is faster
      vterm-shell "/usr/local/bin/fish")          ; Use Fish in vterm
#+END_SRC

*** Projects

#+BEGIN_SRC elisp
(after! projectile
  (setq projectile-project-root-files-bottom-up '("package.json" ".projectile" ".project" ".git")
        projectile-project-search-path '("~/projects" "~/projects/splora/libs" "~/projects/splora/apps" "~/projects/splora/tools")))
#+END_SRC

*** Version Control

#+BEGIN_SRC elisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC

*** Auth Pass Helpers
#+BEGIN_SRC elisp
(defun +fl/auth-pass-get (host user)
  (require 'auth-source-pass)
  (auth-source-pass-enable)
  (funcall (plist-get
            (nth 0 (auth-source-search :max 1 :host host :user user))
            :secret)))
#+END_SRC
** Syntax Checking
#+BEGIN_SRC elisp
(after! popup
  (set-popup-rule! "^\\*Flycheck errors\\*$" :side 'bottom :size 0.2 :select t))

(after! flycheck
  (setq flycheck-check-syntax-automatically '(mode-enabled save new-line idle-change)))

(after! (flycheck lsp-mode)
  (add-hook 'lsp-after-initialize-hook (lambda()
                                        (flycheck-add-next-checker 'lsp '(warning . javascript-eslint)))))
(after! lsp-mode
  (setq lsp-lua-diagnostics-globals ["hs" "spoon"]))
#+END_SRC

*** Spelling Checker

** Search
For some reason, Swiper is really slow to open. The code below magically makes it instant
#+BEGIN_SRC elisp
(setq swiper-use-visual-line nil
      swiper-use-visual-line-p (lambda (a) nil))
#+END_SRC

** UI
#+BEGIN_SRC elisp
;; There's a weird bug where fringe-modes < 8 dont show the fringes
(after! git-gutter
  (fringe-mode 8)
  (after! git-gutter-fringe
    (fringe-mode 8))
  (setq +vc-gutter-diff-unsaved-buffer t))


(after! ibuffer
  (set-popup-rule! "^\\*Ibuffer\\*$" :side 'bottom :size 0.4 :select t :ignore nil))

(setq +ivy-buffer-preview 1)

(setq +treemacs-git-mode 'extended)
(setq doom-themes-treemacs-theme "doom-colors")
(after! treemacs
  (treemacs-follow-mode t))
#+END_SRC

*** Theme
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font" :size 12))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-moonlight)
;;(setq doom-theme 'doom-palenight)

#+END_SRC
*** Tabs
#+BEGIN_SRC elisp

(after! centaur-tabs
  (centaur-tabs-group-by-projectile-project)

  (+popup-window-p) ; needed to prevent recursive auto-loading of popup

  ;; Automatically turn off tabs in popups
  (defun +fl/hide-tabs-in-popup ()
    (if (+popup-window-p)
        (centaur-tabs-local-mode)
      (centaur-tabs-local-mode 0)))
  (add-hook! 'buffer-list-update-hook '+fl/hide-tabs-in-popup))
#+END_SRC

*** Doom Modeline
#+BEGIN_SRC elisp
(unless (equal "Battery status not available"
               (battery))
  (display-battery-mode 1))                       ; On laptops it's nice to know how much power you have

(after! doom-modeline
  (setq doom-modeline-github t
        doom-modeline-github-interval (* 10 60)
        doom-modeline-major-mode-icon t)
  (add-hook 'doom-modeline-before-github-fetch-notification-hook #'auth-source-pass-enable)
  (doom-modeline--github-fetch-notifications))
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC
*** Zen Mode
**** TODO fix fullscreen when entering zen mode
#+BEGIN_SRC elisp
(setq writeroom-fullscreen-effect t)
(after! writeroom-mode
  (setq writeroom-fullscreen-effect t))
#+END_SRC

*** Window Management
#+BEGIN_SRC elisp
;; prefer right and bottom split
(setq evil-vsplit-window-right t
      evil-split-window-below t)

;; show buffer popup when splitting
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(after! window-select
  (custom-set-faces!
    '(aw-leading-char-face
      :foreground "white" :background "red"
      :weight bold :height 2.5 :box (:line-width 10 :color "red"))))
#+END_SRC

** Docs
#+BEGIN_SRC elisp
(set-docsets! 'python-mode "Python 3")
(set-docsets! 'lua-mode "Lua")
(set-docsets! 'emacs-lisp-mode "Emacs Lisp")
(setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)
#+END_SRC

** Apps
*** Email
#+BEGIN_SRC elisp
;; change default notmuch func to open primary inbox
(defun +notmuch ()
  "Activate (or switch to) `notmuch' in its workspace."
  (interactive)
  (unless (featurep! :ui workspaces)
    (user-error ":ui workspaces is required, but disabled"))
  (condition-case-unless-debug e
      (progn
        (+workspace-switch "*email*" t)
        (if-let* ((buf (cl-find-if (lambda (it) (string-match-p "^\\*notmuch" (buffer-name (window-buffer it))))
                                   (doom-visible-windows))))
            (select-window (get-buffer-window buf))
          (notmuch-search "tag:inbox and tag:personal and not tag:trash"))
        (+workspace/display))
    ('error
     (+notmuch/quit)
     (signal (car e) (cdr e)))))

(map! :leader :desc "Open Notmuch" "o m" '+notmuch)

(after! notmuch
  ;; Popup rules
  (set-popup-rule! "^\\*notmuch.*search.*" :ignore t)
  (set-popup-rule! "^ \\*notmuch update.*" :select nil :quit t)
  (set-popup-rule! "^\\*notmuch-thread.*" :side 'bottom :size 0.6 :select t)

  ;; Show Images
  (setq notmuch-show-text/html-blocked-images nil)

  ;; dont use buffernames with thread subjects
  (defun notmuch-show--proper-buffer-name (args)
    (when (= (length args) 5)
      (setq args (butlast args)))
    args)
  (advice-add 'notmuch-show :filter-args 'notmuch-show--proper-buffer-name)

  ;; prefer html over text
  (setq notmuch-multipart/alternative-discouraged '("text/plain" "text/html"))

  (setq notmuch-saved-searches
        '((:name "  Inbox"      :query "tag:inbox and tag:personal and not tag:trash"  :key "i")
          (:name "  Social"     :query "tag:social"              :key "cs")
          (:name "  Updates"    :query "tag:updates"             :key "cu")
          (:name "  Promotions" :query "tag:promotions"          :key "cp")
          (:name "  All Mail"   :query ""                        :key "a")
          (:name "  Starred"    :query "tag:flagged"             :key "*")
          (:name "  Sent"       :query "tag:sent"                :key "s")
          (:name "  Drafts"     :query "tag:draft"               :key "d"))))
#+END_SRC
*** Elfeed
#+BEGIN_SRC elisp
(after! elfeed
  (set-popup-rule! "^\\*elfeed-entry\\*" :side 'bottom :size 0.6 :select t :slot -1 :vslot -10)
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)) ; Update Elfeed when launched
#+END_SRC

*** Google Calendar
#+BEGIN_SRC elisp
(after! org-gcal
  (let ((client-id (+fl/auth-pass-get "gmail.com" "folke^gcal-id"))
        (client-secret (+fl/auth-pass-get "gmail.com" "folke^gcal-secret")))
    (setq org-gcal-client-id client-id
          org-gcal-client-secret client-secret
          org-gcal-fetch-file-alist '(("folke.lemaitre@gmail.com" .  "~/org/calendar.org")
                                      ("013uicuadeh4t1culpvrnna5hs@group.calendar.google.com" . "~/org/family-calendar.org")))))
#+END_SRC
*** Browser

#+BEGIN_SRC elisp

(defvar +fl--browse-url-xwidget-last-session-buffer nil)

(defun +fl/browse-url-xwidget (url &optional new-session)
  (let ((orig-last-session-buffer
         (if (boundp 'xwidget-webkit-last-session-buffer)
             xwidget-webkit-last-session-buffer
           nil)))
    (setq xwidget-webkit-last-session-buffer +fl--browse-url-xwidget-last-session-buffer)
    (save-window-excursion
      (xwidget-webkit-browse-url url new-session))
    (with-popup-rules! '(("^\\*xwidget" :vslot -10 :size 0.6 :select t :slot -1))
      (pop-to-buffer xwidget-webkit-last-session-buffer))
    (setq +fl--browse-url-xwidget-last-session-buffer xwidget-webkit-last-session-buffer
          xwidget-webkit-last-session-buffer orig-last-session-buffer)))

(setq browse-url-browser-function '+fl/browse-url-xwidget)

#+END_SRC

** Org Mode
#+BEGIN_SRC elisp
(setq org-directory "~/projects/org/"
      org-ellipsis "  " ; nerd fonts chevron character
      org-agenda-breadcrumbs-separator "  "
      org-journal-file-type 'weekly
      org-use-property-inheritance t
      org-log-done 'time
      org-log-repeat 'time
      +org-capture-notes-file "inbox.org"
      deft-directory "~/projects/org"
      deft-recursive t)

(after! org
  (setq org-tags-column -80))
#+END_SRC

*** Todo Keywords
#+begin_src elisp
(after! org
  (with-no-warnings
    (custom-declare-face '+org-todo-soon  '((t (:inherit (bold org-drawer org-todo)))) "")
    (custom-declare-face '+org-todo-next  '((t (:inherit (bold font-lock-keyword-face org-todo)))) "")
    (custom-declare-face '+org-todo-onhold  '((t (:inherit (bold warning org-todo)))) ""))
  (setq org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that needs doing & is ready to do
           "SOON(s)"  ; A project, which usually contains other tasks
           "NEXT(n)"  ; A task that is in progress
           "WAIT(w)"  ; Something external is holding up this task
           "HOLD(h)"  ; This task is paused/on hold because of me
           "|"
           "DONE(d)"  ; Task successfully completed
           "KILL(k)")) ; Task was cancelled, aborted or is no longer applicable
        org-todo-keyword-faces
        '(("NEXT" . +org-todo-next)
          ("WAIT" . +org-todo-onhold)
          ("HOLD" . +org-todo-onhold)
          ("SOON" . +org-todo-soon))))
#+end_src

*** Org Roam
#+BEGIN_SRC elisp
(after! org-roam
  (setq org-roam-directory "~/projects/org/notes"
        org-roam-tag-sources '(prop all-directories)
        +org-roam-open-buffer-on-find-file t
        ;; Create new roam notes under ~/org/notes
        org-roam-capture-ref-templates
        '(("d" "default" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n"
           :unnarrowed t
           :immediate-finish t))))
#+END_SRC
*** Pretty Checkboxes
#+BEGIN_SRC elisp
(after! org
  (setq org-tags-column -80)
  (appendq! +ligatures-extra-symbols
            `(:checkbox      ""
              :doing         ""
              :checkedbox    ""
              :list_property "∷"))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :doing         "[-]"
    :checkedbox    "[X]"
    :list_property "::"))
#+END_SRC
*** Agenda
**** Category Icons
#+BEGIN_SRC elisp
(setq org-agenda-category-icon-alist
      `(("inbox" ,(list (all-the-icons-faicon "inbox" :face 'all-the-icons-blue :v-adjust -0.1)) nil nil :ascent center)
        ("dev" ,(list (all-the-icons-faicon "code" :face 'all-the-icons-blue :height 0.8 :v-adjust 0)) nil nil :ascent center)
        ("splora" ,(list (all-the-icons-material "terrain" :face 'all-the-icons-blue :height 0.8)) nil nil :ascent center)
        ("home" ,(list (all-the-icons-faicon "home" :face 'all-the-icons-blue)) nil nil :ascent center)
        ("habits" ,(list (all-the-icons-faicon "undo" :face 'all-the-icons-pink)) nil nil :ascent center)
        ("life" ,(list (all-the-icons-faicon "asterisk" :face 'all-the-icons-blue)) nil nil :ascent center)
        ("birthdays" ,(list (all-the-icons-faicon "birthday-cake" :face 'all-the-icons-red)) nil nil :ascent center)
        ("calendar" ,(list (all-the-icons-faicon "google" :face 'all-the-icons-blue)) nil nil :ascent center)
        ("holidays" ,(list (all-the-icons-faicon "calendar-check-o" :face 'all-the-icons-green)) nil nil :ascent center)))
#+END_SRC

**** Pretty Agenda
#+BEGIN_SRC elisp
(after! org-agenda
  (set-popup-rule! "^\\*Org Agenda\\*$" :side 'bottom :size 0.4 :select t)
  (setq org-agenda-prefix-format
        '((agenda . "\t\t\t%-2i %-12t % s")
          (todo . "\t%-2i %-30b ")
          (tags . " %i %-12:c")
          (search         . " %i %-12:c"))
        org-agenda-block-separator nil
        org-agenda-time-grid (quote ((today daily require-timed remove-match) (0900 2100) " ╴╴╴╴╴" "──────────────────────"))
        org-agenda-current-time-string " now ────────────────")
  (set-face-attribute 'org-agenda-structure nil
                      :height 1.2
                      :foreground (face-attribute 'org-level-1 :foreground nil t)))
#+END_SRC

**** Sorting Strategy
#+BEGIN_SRC elisp
(setq org-agenda-sorting-strategy
      '((agenda habit-down time-up priority-down category-keep)
        (todo   priority-down todo-state-down category-keep)
        (tags   priority-down category-keep)
        (search category-keep)))
#+END_SRC
**** Date/Time Format
#+BEGIN_SRC elisp
(setq org-agenda-format-date 'my-org-agenda-format-date-aligned)
(defun my-org-agenda-format-date-aligned (date)
  (require 'cal-iso)
  (let* ((dayname (calendar-day-name date nil nil))
         (day (cadr date))
         (month (car date))
         (monthname (calendar-month-name month nil))
         (year (nth 2 date)))
    (format "    %-10s %2d %s %4d"
            dayname day monthname year)))
#+END_SRC

**** Super Agenda
#+BEGIN_SRC elisp
(use-package! org-super-agenda
  :after org-agenda)

(after! org-super-agenda
  (setq org-super-agenda-unmatched-name "⚡ Backlog")
  (org-super-agenda-mode))
#+END_SRC

**** Agenda Views
#+BEGIN_SRC elisp
(setq org-agenda-custom-commands
      '(("o" "Overview"
         ((todo "NEXT|SOON"
                ((org-agenda-overriding-header "\n ⚡ Today")
                 (org-agenda-remove-tags t)))
          (agenda ""
                  ((org-agenda-skip-scheduled-if-done t)
                   (org-agenda-start-day "0d")
                   (org-agenda-span 3)
                   (org-agenda-skip-timestamp-if-done t)
                   (org-agenda-skip-deadline-if-done t)
                   (org-agenda-overriding-header "\n ⚡ Agenda")
                   (org-agenda-repeating-timestamp-show-all nil)
                   (org-agenda-remove-tags t)
                   (org-agenda-time)))
          (todo "TODO|WAIT|HOLD"
                ((org-agenda-overriding-header "")
                 (org-agenda-remove-tags t)
                 (org-super-agenda-groups
                  '((:name "⚡ Inbox"
                     :category "inbox")
                    (:name "⚡ Next"
                     :todo "NEXT")
                    (:name "⚡ Soon"
                     :todo "SOON")
                    (:todo ("WAIT" "HOLD") :name "⚡ On Hold" :order 11)))))))))
#+END_SRC
**** Org Habits
#+BEGIN_SRC elisp
(after! org-agenda
  (setq org-habit-show-all-today t
        org-habit-today-glyph ?⚡
        org-habit-completed-glyph ?+ ))
#+END_SRC
